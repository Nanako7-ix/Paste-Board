struct LCA {
    int n, rt, tot = 0, worked = 0;
    vector<vector<int>> adj, st;
    vector<int> fa, dep, dfn;
    LCA(int n, int rt) : n(n), rt(rt) {
        st.assign(__lg(n) + 1, vector<int> (n + 1));
        fa.resize(n + 1);
        adj.resize(n + 1);
        dep.resize(n + 1);
        dfn.resize(n + 1);
    }
    void add(int u, int v) {
        adj[u].emplace_back(v);
        adj[v].emplace_back(u);
    }
    void dfs(int u) {
        dfn[u] = ++tot;
        st[0][tot] = u;
        for(auto v :adj[u]) {
            if(v == fa[u]) continue;
            dep[v] = dep[u] + 1;
            fa[v] = u;
            dfs(v);
        }
    }
    int merge(int x, int y) {
        return dep[x] < dep[y] ? x : y;
    }
    void work() {
        worked = 1; dfs(rt);
        for(int i = 1; i <= __lg(n); ++i) {
            for(int j = 1; j + (1 << i) - 1 <= n; ++j) {
                st[i][j] = merge(st[i - 1][j], st[i - 1][j + (1 << (i - 1))]);
            }
        }
    }
    int operator()(int u, int v) {
        if(!worked) work();
        if(u == v) return u;
        u = dfn[u], v = dfn[v];
        if(u > v) swap(u,  v);
        u += 1;
        int len = __lg(v - u + 1);
        return fa[merge(st[len][u], st[len][v - (1 << len) + 1])];
    }
};
